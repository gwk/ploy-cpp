# tail recursive function.
<let-fn f [-n -i]
  <if (not n) i (self (idec n) (iinc i))>>
(outRL (f 10000 0))

# tail recursive data structure.
<let-fn g [-n -tl]
  <if (not n) tl (self (idec n) {:Arr-Int n tl})>>
(outRL (g 4 nil))
(g 40000 nil) # requires that release/dealloc are tail-optimized.
