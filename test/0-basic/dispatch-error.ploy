
# for now, create a type manually. TODO: use type constructor.
<let T {:Type
  `T
  {:Type-kind-struct
    {:Mem-Par}
    nil}}> # dispatcher starts as nil.

<let-fn dispatcher [-callee -types:Mem-Types]
  # NOTE: specifying correct type T for callee would create a cycle.
  <check (ieq (mlen types) 1) "dispatcher requires 1 argument">
  <let T0 (el types 0)>
  <if
    (is T0 Sym)   <fn [-obj:Sym]  (outRSL `Sym obj)>
    (is T0 Int)   <fn [-obj:Int]  (outRSL `Int obj)>
    (is T0 Data)  <fn [-obj:Data] (outRSL `Data obj)>
    (error "dispatcher cannot handle argument type (intentional test error)")>>

(.=dispatcher (.kind T) dispatcher) # set the dispatcher, creating a cycle.
(globalize T)

<let i {:T}>
(i `s)
(i 1)
(i "hi")
(i T)
