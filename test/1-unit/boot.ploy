
<scope # iso.
  <utest true (iso 0 0)>
  <utest false (iso 0 1)>
  <utest false (iso 0 false)>
  <utest true (iso (CONS Arr-Int) (CONS Arr-Int))>
  <utest true (iso (CONS Arr-Int 1 2) (CONS Arr-Int 1 2))>
  <utest false (iso (CONS Arr-Int 1) (CONS Arr-Int 1 2))>>

<scope # List.
  <let l (list-new)>
  <utest false (list-contains l `a)>
  <utest false (list-contains l `d)>
  (list-append l `a)
  (list-append l `b)
  (list-append l `c)
  (list-append l `d)
  <utest `a (list-el l 0)>
  <utest `d (list-el l 3)>
  <utest true (list-contains l `a)>
  <utest true (list-contains l `d)>
  <utest false (list-contains l `e)>>

<scope # List as Set.
  <let s (list-new)>
  (list-set-put s `a)
  (list-set-put s `b)
  <utest 2 (.len s)>
  <utest true (list-contains s `a)>
  <utest true (list-contains s `b)>
  <utest false (list-contains s `c)>
  (list-set-put s `a)
  (list-set-put s `b)
  <utest 2 (.len s)>
  <utest true (list-contains s `a)>
  <utest true (list-contains s `b)>
  <utest false (list-contains s `c)>>

<scope # List as Dict.
  <let d (list-new)>
  (list-dict-put d `ka `va)
  (list-dict-put d `kb `vb)
  <utest 2 (.len d)>
  <utest true (list-dict-contains d `ka)>
  <utest true (list-dict-contains d `kb)>
  <utest false (list-dict-contains d `kc)>
  <utest `va (list-dict-fetch d `ka)>
  <utest `vb (list-dict-fetch d `kb)>
  <utest nil (list-dict-fetch d `kc)>
  (list-dict-put d `ka `va1)
  (list-dict-put d `kb `vb1)
  <utest 2 (.len d)>
  <utest true (list-dict-contains d `ka)>
  <utest true (list-dict-contains d `kb)>
  <utest false (list-dict-contains d `kc)>
  <utest `va1 (list-dict-fetch d `ka)>
  <utest `vb1 (list-dict-fetch d `kb)>
  <utest nil (list-dict-fetch d `kc)>>

<scope # derive-type.
  <utest
    (CONS Type `DERIVED-ARR (CONS Type-kind-arr Int))
    (derive-type Arr (list-dict-new T Int))>
  <utest
    true
    <let A (derive-type Arr (list-dict-new T Int))>
    <let B (derive-type Arr (list-dict-new T Int))>
    (is A B)>>
