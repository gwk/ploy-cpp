<scope # boolean ops.
  <utest false  <or>>
  <utest false  <or 0>>
  <utest true   <or 1>>
  <utest false  <or 0 0>>
  <utest true   <or 1 0>>
  <utest true   <or 0 1>>
  <utest true   <or 1 1>>
  <utest true   <and>>
  <utest false  <and 0>>
  <utest true   <and 1>>
  <utest false  <and 0 0>>
  <utest false  <and 1 0>>
  <utest false  <and 0 1>>
  <utest true   <and 1 1>>>

<scope # is-cmpd.
  <utest false (is-cmpd 0)>
  <utest false (is-cmpd false)>
  <utest false (is-cmpd '')>
  <utest false (is-cmpd 'long...!...!...!')>
  <utest true  (is-cmpd (CONS Arr-Obj))>>

<scope # iso.
  <utest true (iso 0 0)>
  <utest false (iso 0 1)>
  <utest false (iso 0 false)>
  <utest true (iso (CONS Arr-Int) (CONS Arr-Int))>
  <utest true (iso (CONS Arr-Int 1 2) (CONS Arr-Int 1 2))>
  <utest false (iso (CONS Arr-Int 1) (CONS Arr-Int 1 2))>>

<scope # transform-arr-by-el.
  let o (CONS Arr-Int 0 1 2); # original.
  <utest true (is o (transform-arr-by-el o <fn [-e] e>))>
  <utest (CONS Arr-Int 0 2 3) (transform-arr-by-el o <fn [-e] if e (iinc e) e;>)>>

<scope # arr-map.
  <utest (CONS Arr-Int 2 3 4) (arr-map (CONS Arr-Int 1 2 3) Arr-Int <fn [-x] (iinc x)>)>>

<scope # transform-struct.
  let o `-a:b=c; # original.
  <utest true (is o (transform-struct o <fn [-n -v] v>))>
  <utest `-n:b=c (transform-struct o <fn [-n -v] if (is n `name) `n v;>)>
  <utest `-a:t=c (transform-struct o <fn [-n -v] if (is n `type) `t v;>)>
  <utest `-a:b=e (transform-struct o <fn [-n -v] if (is n `expr) `e v;>)>>

<scope # List.
  let l (list-new);
  <utest false (list-contains is l `a)>
  <utest false (list-contains is l `d)>
  (list-append l `a)
  (list-append l `b)
  (list-append l `c)
  (list-append l `d)
  <utest `a (list-el l 0)>
  <utest `d (list-el l 3)>
  <utest true (list-contains is l `a)>
  <utest true (list-contains is l `d)>
  <utest false (list-contains is l `e)>>

<scope # List as Set.
  let s (list-new);
  (list-set-put is s `a)
  (list-set-put is s `b)
  <utest 2 (.len s)>
  <utest true (list-contains is s `a)>
  <utest true (list-contains is s `b)>
  <utest false (list-contains is s `c)>
  (list-set-put is s `a)
  (list-set-put is s `b)
  <utest 2 (.len s)>
  <utest true (list-contains is s `a)>
  <utest true (list-contains is s `b)>
  <utest false (list-contains is s `c)>>

<scope # List as Dict.
  let d (list-new);
  (list-dict-put is is d `ka `va)
  (list-dict-put is is d `kb `vb)
  <utest 2 (.len d)>
  <utest true (list-dict-contains is d `ka)>
  <utest true (list-dict-contains is d `kb)>
  <utest false (list-dict-contains is d `kc)>
  <utest (CONS Dict-fetch true `va) (list-dict-fetch is d `ka)>
  <utest (CONS Dict-fetch true `vb) (list-dict-fetch is d `kb)>
  <utest (CONS Dict-fetch false nil) (list-dict-fetch is d `kc)>
  (list-dict-put is (const2 true) d `ka `va1) # cmp-val ignores mismatch, does not raise.
  (list-dict-put is (const2 true) d `kb `vb1) # " ".
  <utest 2 (.len d)>
  <utest true (list-dict-contains is d `ka)>
  <utest true (list-dict-contains is d `kb)>
  <utest false (list-dict-contains is d `kc)>
  <utest (CONS Dict-fetch true `va) (list-dict-fetch is d `ka)>
  <utest (CONS Dict-fetch true `vb) (list-dict-fetch is d `kb)>
  <utest (CONS Dict-fetch false nil) (list-dict-fetch is d `kc)>>

##<scope # derive.
  <utest
    (CONS Type `(Arr -E=Int) (CONS Type-kind-arr Int))
    Arr-Int>>
