# Copyright 2014 George King.
# Permission to use this file is granted in ploy/license.txt.

<let depth 18>

<let-fn gen-tree [-n -t]
  # generate a binary trie of zeros n branches deep.
  <if (not n) t
  <do
  (self (idec n) (CONS Arr-Int t t))>>>

<let-fn sum-tree [-t]
  # walk a tree and add all of the leaves.
  <if (is-int t) t
    (iadd (self (ael t 0)) (self (ael t 1)))>>


<let leaf 1>
<let t (gen-tree depth leaf)>
(outRL (sum-tree t))
