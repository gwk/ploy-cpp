# Copyright 2014 George King.
# Permission to use this file is granted in ploy/license.txt.

# builtin macros and functions that are available to all programs.


<fn error [-msg]
  # raise an error. for now we can only print the message and exit.
  (raw-write (field std-err 1) 'error: ')
  (raw-write (field std-err 1) msg)
  (raw-write (field std-err 1) '\n')
  (exit 1)>

# math functions.

<fn iinc [-i] (iadd i 1)>

<fn idec [-i] (isub i 1)>

# type functions.

<fn is-int [-o] (sym-eq (type-of o) `Int)>
<fn is-sym [-o] (sym-eq (type-of o) `Sym)>
<fn is-data [-o] (sym-eq (type-of o) `Data)>
<fn is-vec [-o] (sym-eq (type-of o) `Vec)>
<fn is-env [-o] (sym-eq (type-of o) `Env)>
<fn is-file [-o] (sym-eq (type-of o) `File)>
<fn is-func_host [-o] (sym-eq (type-of o) `Func-host)>


# vec functions.

<fn hd [-vec] (el vec 0)>

<fn tl [-vec] (el vec (idec (len vec)))>

<fn vec-next [-vec]
  # this a poor substitute for a real vec iterator.
 (slice vec 1 (len vec))>

<fn vec-from [-vec -from]
  (slice vec from (len vec))>

<fn vec-to [-vec -to]
  (slice vec 0 to)>

# control flow.

<macro _if-then [-pred -then]
  # 'if' variant that takes exactly two expressions; for bootstrapping the 'if' macro.
  {:If pred then void}>

<macro _if-then-else [-pred -then -else]
  # 'if' variant that takes exactly three expressions; for bootstrapping the 'if' macro.
  {:If pred then else}>

<macro if [&exprs]
  # generic 'if'. inspired by paul graham's arc-lisp.
  <_if-then (ilt (len exprs) 2) (error "degenerate if form")>
  <fn f [-pred -then -rest]
    <let l (len rest)>
    #(_errR1L 'f l: ' l)
    #(_errR1L 'f pred: ' pred)
    #(_errR1L 'f then: ' then)
    #(_errR1L 'f rest: ' rest)
    <_if-then-else (not l)
      {:If pred then void} # final if-else
      <_if-then-else (ieq l 1)
        {:If pred then (hd rest)} # final clause is an unconditional else.
        {:If pred then (self (hd rest) (el rest 1) (vec-from rest 2))}>>>
  (f (hd exprs) (el exprs 1) (slice exprs 2 (len exprs)))>

<macro when [-pred &exprs]
  # if 'pred', do 'exprs'. else none.
  {:If pred (prepend Do exprs) void}> # TODO: eventually this should use splice-unquote.

# output functions.

<fn write1 [-file -str]
  # write a single string.
  # TODO: support other types.
  (raw-write (field file 1) str)>

<fn writeR1 [-file -obj]
  # write a single repr.
  (raw-write-repr (field file 1) obj)>

# TODO: this is a temporary, halfway solution to the desired printing functions.
# would be better to use a macro to generate each function with no subcalls.

<fn writeSE [-file -sep -end -first -rest]
  # write strings with separator and end strings.
  #(_errR1L 'writeSE f: ' first)
  #(_errR1L 'writeSE r: ' rest)
  (write1 file first)
  <if (not rest)
    (write1 file end)
    <do
      (write1 file sep)
      (self file sep end (hd rest) (vec-next rest))>>>

<fn writeRSE [-file -sep -end -first -rest]
  # write reprs with separator and end strings.
  (writeR1 file first)
  <if (not rest)
    (write1 file end)
    <do
      (write1 file sep)
      (self file sep end (hd rest) (vec-next rest))>>>

<fn out [&objs]
  <if (not objs)
    void
    (writeSE std-out '' '' (hd objs) (vec-next objs))>>

<fn outS [&objs]
  <if (not objs)
    void
    (writeSE std-out ' ' '' (hd objs) (vec-next objs))>>

<fn outL [&objs]
  <if (not objs)
    (write1 std-out '\n')
    (writeSE std-out '' '\n' (hd objs) (vec-next objs))>>

<fn outSL [&objs]
  <if (not objs)
    (write1 std-out '\n')
    (writeSE std-out ' ' '\n' (hd objs) (vec-next objs))>>

<fn outSS [&objs]
  <if (not objs)
    (write1 std-out ' ')
    (writeSE std-out ' ' ' ' (hd objs) (vec-next objs))>>

<fn outLL [&objs]
  <if (not objs)
    (write1 std-out '\n')
    (writeSE std-out '\n' '\n' (hd objs) (vec-next objs))>>


<fn err [&objs]
  <if (not objs)
    void
    (writeSE std-err '' '' (hd objs) (vec-next objs))>>

<fn errS [&objs]
  <if (not objs)
    void
    (writeSE std-err ' ' '' (hd objs) (vec-next objs))>>

<fn errL [&objs]
  <if (not objs)
    (write1 std-err '\n')
    (writeSE std-err '' '\n' (hd objs) (vec-next objs))>>

<fn errSS [&objs]
  <if (not objs)
    (write1 std-err ' ')
    (writeSE std-err ' ' ' ' (hd objs) (vec-next objs))>>

<fn errSL [&objs]
  <if (not objs)
    (write1 std-err '\n')
    (writeSE std-err ' ' '\n' (hd objs) (vec-next objs))>>

<fn errLL [&objs]
  <if (not objs)
    (write1 std-err '\n')
    (writeSE std-err '\n' '\n' (hd objs) (vec-next objs))>>


<fn outR [&objs]
  <if (not objs)
    void
    (writeSE std-out '' '' (hd objs) (vec-next objs))>>

<fn outRS [&objs]
  <if (not objs)
    void
    (writeSE std-out ' ' '' (hd objs) (vec-next objs))>>

<fn outRL [&objs]
  <if (not objs)
    (write1 std-out '\n')
    (writeRSE std-out '' '\n' (hd objs) (vec-next objs))>>

<fn outRSS [&objs]
  <if (not objs)
    (write1 std-out ' ')
    (writeRSE std-out ' ' ' ' (hd objs) (vec-next objs))>>

<fn outRSL [&objs]
  <if (not objs)
    (write1 std-out '\n')
    (writeRSE std-out ' ' '\n' (hd objs) (vec-next objs))>>

<fn outRLL [&objs]
  <if (not objs)
    (write1 std-out '\n')
    (writeRSE std-out '\n' '\n' (hd objs) (vec-next objs))>>


<fn errR [&objs]
  <if (not objs)
    void
    (writeRSE std-err '' '' (hd objs) (vec-next objs))>>

<fn errRS [&objs]
  <if (not objs)
    void
    (writeRSE std-err ' ' '' (hd objs) (vec-next objs))>>

<fn errRL [&objs]
  <if (not objs)
    (write1 std-err '\n')
    (writeRSE std-err '' '\n' (hd objs) (vec-next objs))>>

<fn errRSS [&objs]
  <if (not objs)
    (write1 std-err ' ')
    (writeRSE std-err ' ' ' ' (hd objs) (vec-next objs))>>

<fn errRSL [&objs]
  <if (not objs)
    (write1 std-err '\n')
    (writeRSE std-err ' ' '\n' (hd objs) (vec-next objs))>>

<fn errRLL [&objs]
  <if (not objs)
    (write1 std-err '\n')
    (writeRSE std-err '\n' '\n' (hd objs) (vec-next objs))>>
