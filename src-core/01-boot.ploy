# Copyright 2014 George King.
# Permission to use this file is granted in ploy/license.txt.

# macros and functions that must be bootstrapped using special syntax.
# the 'struct-boot' syntax {!...} is used to construct special form code vectors directly,
# before the idiomatic form macros are defined.
# once available, the form macros should be used instead of the raw forms;
# they provide a layer of abstraction between ploy code and the exact evaluation semantics,
# as well as increased expressiveness and syntactic consistency.


{!Let _errR1L
  # print a representation of a single object to std-err.
  # defined early for debugging.
  {!Fn
    _errR1L # the name sym of this fn.
    true # is native.
    false # not a macro.
    [-label -obj] # parameter list.
    nil # unspecified ret type.
    {!Do # body.
      # standard files are defined as a [name, file] vec.
      (raw-write (el std-err 1) label)
      (raw-write-repr (el std-err 1) obj)
      (raw-write (el std-err 1) '\n')}}}

{!Let macro
  # the 'macro' macro defines a new macro in the current environment.
  # TODO: refine environment semantics?
  # note: if core was already available, we would define 'macro' using itself like so:
  ##<macro macro [-sym -pars &body]
      [Let sym
        [ Fn # this form creates a new function/macro that...
          sym # contains its name sym,
          true # is a native function,
          true # is a macro,
          pars # has the specified parameter list,
          nil # unspecified ret type.
          {!if (ieq (len body) 1) # and body...
            (el body 0)
            (prepend Do body)}]]> # wrapped in a do form if necessary.
  # instead, we must define it using raw forms.
  # note the structural similarity between the outer FN form and the inner vec literal.
  {!Fn # creates both functions and macros
    macro # the sym for this macro is `macro;
    # we do not quote it because this is a raw form, so it is not evaluated.
    true # is-native.
    true # is-macro.
    [-sym -pars &body] # the parameter list; also unquoted, as parameter lists always are.
    nil # ret.
    [Let # the body of the 'macro' macro is a LET form.
      sym # the sym parameter that the macro to be created is bound to (not `macro).
      [ Fn # the value of the binding is created by evaluating the FN form;
        # note that this inner FN is inside a vec literal;
        # when the 'macro' macro is expanded, the literal is evaluated,
        # and a {FN ...} form is the resulting code vector.
        sym
        true
        true
        pars
        nil # unspecified ret type.
        {!If (ieq (len body) 1)
          (el body 0)
          (prepend Do body)}]]}}

<macro fn [-sym -pars &body]
  # defines a function in the current environment.
  # TODO: refine environment semantics?
  # this is conceptually the same as macro; see the explanation above.
  [Let sym
    [ Fn
      sym
      true
      false
      pars
      nil # unspecified ret type.
      {!If (ieq (len body) 1)
        (el body 0)
        (prepend Do body)}]]>

# define macros to wrap the special forms.

<macro quo [-expr]
  # absolute quotation of an expression.
  # evaluating a QUO form simply yields the contained expression, unevaluated.
  [Quo expr]>

<macro qua [-expr]
  # quasiquotation of an expression.
  # this is similar to quo, except that subexpressions can be unquoted,
  # in which case they are evaluated.
  # QUA forms themselves do not evaluate; they are converted by the preprocessor.
  # equivalent to `expr syntax.
  # TODO: implement quasiquotation as a macro instead of in the preprocessor?
  [Qua expr]>

<macro unq [-expr]
  # unquotation of an expression.
  # this form indicates that the unquoted subexpression should be evaluated within a qua form.
  # this for does not evaluate, and therefore must be inside of a qua,
  # where it will get transformed appropriately.
  # equivalent to ,expr syntax
  [Unq expr]>

<macro do [&exprs]
  (prepend Do exprs)>

<macro let [-sym -expr]
  # bind the value of expr to sym in the current environment.
  [Let sym expr]>
