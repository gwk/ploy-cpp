# Copyright 2014 George King.
# Permission to use this file is granted in ploy/license.txt.

# bootstrap ploy, beginning with macros for the special forms.
# this module defines initial versions of many core constructs;
# some are imported into core, and others are replaced with more capable implementations.

(RUN # special call form to run the argument as code in the current environment.
  # the 'macro' macro defines a new macro in the current environment.
  # because we cannot use macro to define itself, we must define it using raw forms.
  # note the structural similarity between the outer Fn form and the inner struct literal.
  {:Bind
    false # is-mutable.
    true # is-public.
    `macro # name.
    {:Fn # Fn creates both functions and macros.
      true # is-native.
      true # is-macro.
      `[-sym -pars &body] # the parameter list, which does not get evaluated.
      nil # ret-type.
      `{:Bind # the body of the 'macro' macro is a Bind form.
        false # is-mutable.
        true # is-public.
        sym # name.
        {:Fn # the value of the binding is created by evaluating the Fn form.
          true # is-native.
          true # is-macro.
          pars
          nil # ret-type.
          {:Do {:Arr-Expr *body}}}}}})

# define macros to wrap the special forms.

<macro fn [-pars &body]
  # create a function.
  {:Fn
    true # is-native.
    false # is-macro.
    pars
    nil # ret-type.
    {:Do {:Arr-Expr *body}}}>

<macro quo [-expr]
  # absolute quotation of an expression.
  # evaluating a QUO form simply yields the contained expression, unevaluated.
  {:Quo expr}>

<macro qua [-expr]
  # quasiquotation of an expression.
  # this is similar to quo, except that subexpressions can be unquoted,
  # in which case they are evaluated.
  # QUA forms themselves do not evaluate; they are converted by the preprocessor.
  # equivalent to `expr syntax.
  # TODO: implement quasiquotation as a macro instead of in the preprocessor?
  {:Qua expr}>

<macro unq [-expr]
  # unquotation of an expression.
  # this form indicates that the unquoted subexpression should be evaluated within a qua form.
  # this for does not evaluate, and therefore must be inside of a qua,
  # where it will get transformed appropriately.
  # equivalent to ,expr syntax
  {:Unq expr}>

<macro do [&body]
  {:Do {:Arr-Expr *body}}>

<macro scope [&body]
  {:Scope {:Do {:Arr-Expr *body}}}>

<macro let [-sym -expr]
  # immutable, private binding.
  {:Bind false false sym expr}>

<macro var [-sym -expr]
  # mutable, private binding.
  {:Bind true false sym expr}>

<macro pub [-sym -expr]
  # immutable, public binding.
  {:Bind false true sym expr}>

# the raw forms are now available through macros.

<macro let-fn [-sym -pars &body]
  ~<let ,sym <fn ,pars ,*body>>>

<macro pub-fn [-sym -pars &body]
  ~<pub ,sym <fn ,pars ,*body>>>

<let alen cmpd-len> # for now use a simple alias.

# math functions.

<pub-fn iinc [-i] (iadd i 1)>

<pub-fn idec [-i] (isub i 1)>

# type functions.

<pub-fn is-ptr  [-o] (is (type-of o) Ptr)>
<pub-fn is-int  [-o] (is (type-of o) Int)>
<pub-fn is-sym  [-o] (is (type-of o) Sym)>
<pub-fn is-data [-o] (is (type-of o) Data)>
<pub-fn is-env  [-o] (is (type-of o) Env)>
<pub-fn is-type [-o] (is (type-of o) Type)>

# control flow.

<pub-fn error [-msg]
  # raise an error. for now we can only print the message and exit.
  (raise msg)>

<macro recur [-name -init &body]
  ~(<fn [-,name] ,*body> ,init)>

<macro _if [-pred -then -else]
  # bootstrap 'if' that takes exactly three expressions.
  {:If pred then else}>

<macro if [&exprs]
  # generic 'if'. inspired by paul graham's arc-lisp.
  <_if (ilt (alen exprs) 2) (error "degenerate if form")
    <recur i 0
      <let len (alen exprs)>
      <let pred (ael exprs i)>
      <let then (ael exprs (iinc i))>
      <_if (ieq (iadd i 2) len)
        {:If pred then void} # final if-else.
        <_if (ieq (iadd i 3) len)
          {:If pred then (ael exprs (iadd i 2))} # final clause is an unconditional else.
          {:If pred then (self (iadd i 2))}>>>>>

<macro when [-pred &body]
  # if 'pred', do 'exprs'. else none.
  {:If pred {:Do body} void}>

<macro check [-condition -msg]
  ~<do <if (not ,condition) (error ,msg)> void>> # void foils TCO so that trace reveals test.

# output functions.

<let-fn write1 [-file -str]
  # write a single string.
  # TODO: support other types.
  (_host-write (.ptr file) str)>

<let-fn writeR1 [-file -obj]
  # write a single repr.
  (_host-write-repr (.ptr file) obj)>

<macro pub-writer [-name -writer1 -file -sep -end]
  ~<pub-fn ,name [&items]
    <recur i 0
      <if (ieq i (alen items))
        (write1 ,file ,end)
        <do
          <if i (write1 ,file ,sep)>
          (,writer1 ,file (ael items i))
          (self (iinc i))>>>>>

<pub-writer out   write1 std-out '' ''>
<pub-writer outS  write1 std-out ' ' ''>
<pub-writer outSS write1 std-out ' ' ' '>
<pub-writer outL  write1 std-out '' '\n'>
<pub-writer outSL write1 std-out ' ' '\n'>
<pub-writer outLL write1 std-out '\n' '\n'>

<pub-writer err   write1 std-err '' ''>
<pub-writer errS  write1 std-err ' ' ''>
<pub-writer errSS write1 std-err ' ' ' '>
<pub-writer errL  write1 std-err '' '\n'>
<pub-writer errSL write1 std-err ' ' '\n'>
<pub-writer errLL write1 std-err '\n' '\n'>

<pub-writer outR   writeR1 std-out '' ''>
<pub-writer outRS  writeR1 std-out ' ' ''>
<pub-writer outRSS writeR1 std-out ' ' ' '>
<pub-writer outRL  writeR1 std-out '' '\n'>
<pub-writer outRSL writeR1 std-out ' ' '\n'>
<pub-writer outRLL writeR1 std-out '\n' '\n'>

<pub-writer errR   writeR1 std-err '' ''>
<pub-writer errRS  writeR1 std-err ' ' ''>
<pub-writer errRSS writeR1 std-err ' ' ' '>
<pub-writer errRL  writeR1 std-err '' '\n'>
<pub-writer errRSL writeR1 std-err ' ' '\n'>
<pub-writer errRLL writeR1 std-err '\n' '\n'>

# type bootstrapping.

<macro let-type [-name -kind]
  # type instances are structs of -name:Expr -kind:Type-kind.
  # note that the type of name is Expr, not Sym,
  # because the name of a derived type might be the expression used to derive it.
  # Type-kind is a union of the various Type-kind-*.
  ~<let ,name {:Type `,name ,kind}>>

# idiomatic type vars.
<let-type T {:Type-kind-var `T}>
<let-type K {:Type-kind-var `K}>
<let-type V {:Type-kind-var `V}>

# comparison.

<pub-fn iso [-a -b]
  <let t (type-of a)>
  <if (not (is t (type-of b))) false
    (not (is-ref a)) (is a b)
    (is-data a) (data-ref-iso a b)
    <do
      <let len (cmpd-len a)>
      <if (ine len (cmpd-len b)) false
        (not len) true
        <do
          <let last (idec len)>
          <let iso self>
          <recur i 0
            <let ai (cmpd-field a i)>
            <let bi (cmpd-field b i)>
            <if (ieq i last) (iso ai bi) # tail optimized.
              (not (iso ai bi)) false
              (self (iinc i))>>>>>>>

# unit tests.

<macro utest [-expectation &body]
  ~<check (iso ,expectation <do ,*body>) "utest failure.">>

<utest 0 0>

# Arr.

<let-type Arr {:Type-kind-arr T}>

<let-type Arr-Int {:Type-kind-arr Int}>

<let-fn arr-resize [-arr:Arr -len:len]
  # create a new array with elements copied from arr; further elements remain UNINIT.
  <let res (anew Arr len)>
  (<fn [-i]
    <if (ieq i (alen arr)) res
      <do
        (aput res i (ael arr i))
        (self (iinc i))>>> 0)>

<let-fn arr-map [-arr -ret-type:Type -f]
  <let l (alen arr)>
  <let res (anew ret-type l)>
  (<fn [-i]
    <if (ieq i l) res
      <do
        (aput res i (f (ael arr i)))
        (self (iinc i))>>> 0)>

# type declarations.

<macro let-struct [-name &fields]
  <let pars (arr-map fields Arr-Par <fn [-field]
    {:Par (.name field) (.type field) (.expr field)}>)>
  ~<let-type ,name {:Type-kind-struct
      `,pars
      nil}>> # dispatcher

<macro let-union [-name &variants]
  ~<let-type ,name {:Type-kind-struct `,(arr-map variants Arr-Type identity)}>>

# List (untyped).

<let-struct List -len:Int -arr:Arr> # resizable array.

<let-fn list-new [] {:List 0 {:Arr}}>

<let-fn list-el [-list:List -index:Int]
  <check (ilt index (.len list)) "index out of bounds">
  (ael (.arr list) index)>

<let-fn list-put [-list:list -index:Int -el:T]
  check((ilt index (.len list)) "index out of bounds")
  (aput (.arr list) index el)>

<let-fn list-is-full [-list:List] (ieq (.len list) (alen (.arr list)))>

<let-fn list-grow [-list:List]
  <check (list-is-full list) "list should not grow unless arr is full">
  <let len (.len list)>
  <let cap <if len (imul len 2) 2>>
  (.=arr list (arr-resize (.arr list) cap))>

<let-fn list-append [-list:List -el:T]
  <if (list-is-full list) (list-grow list)>
  <let index (.len list)>
  (.=len list (iinc index))
  (aput (.arr list) index el)>
  
