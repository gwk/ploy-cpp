# Copyright 2014 George King.
# Permission to use this file is granted in ploy/license.txt.

# bootstrap ploy, beginning with macros for the special forms.
# this module defines initial versions of many core constructs;
# some are imported into core, and others are replaced with more capable implementations.

(RUN # special call form to run the argument as code in the current environment.
  # the 'macro' macro defines a new macro in the current environment.
  # because we cannot use macro to define itself, we must define it using raw forms.
  # note the structural similarity between the outer Fn form and the inner struct literal.
  (CONS Bind
    true # is-public.
    `macro # name.
    (CONS Fn # Fn creates both functions and macros.
      true # is-native.
      true # is-macro.
      `[-sym -pars &body] # the parameter list, which does not get evaluated.
      `(CONS Bind # the body of the 'macro' macro is a Bind form.
        true # is-public.
        sym # name.
        (CONS Fn # the value of the binding is created by evaluating the Fn form.
          true # is-native.
          true # is-macro.
          pars
          body)))))

# define macros to wrap the special forms.

<macro fn [-pars &body]
  # create a function.
  (CONS Fn
    true # is-native.
    false # is-macro.
    pars
    body)>

<macro scope [&body]
  (CONS Scope body)>

<macro let [-sym -expr]
  # private binding.
  (CONS Bind false sym expr)>

<macro pub [-sym -expr]
  # public binding.
  (CONS Bind true sym expr)>

# the raw forms are now available through macros.

<macro let-fn [-sym -pars &body]
  ~<let ,sym <fn ,pars <let ,sym self> ,*body>>>

<macro pub-fn [-sym -pars &body]
  ~<pub ,sym <fn ,pars <let ,sym self> ,*body>>>

<let alen cmpd-len> # for now use a simple alias.

# math functions.

<pub-fn iinc [-i] (iadd i 1)>

<pub-fn idec [-i] (isub i 1)>

# control flow.

<pub-fn error [-msg]
  # raise an error. for now we can only print the message and exit.
  (raise msg)>

<macro recur [-pars &body]
  ~(<fn ,pars ,*body>)>

<macro cond [&exprs]
  <let len (alen exprs)>
  if (ilt len 2) (error "degenerate if form")
    <recur [-i=0]
      <let pred (ael exprs i)>
      <let then (ael exprs (iinc i))>
      if (ieq (iadd i 2) len)
        ~if ,pred ,then void; # final if-else.
        if (ieq (iadd i 3) len)
          ~if ,pred ,then ,(ael exprs (iadd i 2)); # final clause is an unconditional else.
          ~if ,pred ,then ,(self (iadd i 2));;;>;>

<macro when [-pred &body]
  # if 'pred', do 'exprs'. else none.
  ~if ,pred ,body void;>

<macro check [-condition -msg]
  ~{<when (not ,condition) (error ,msg)> void}> # void foils TCO so that trace reveals test.

<macro or [&exprs]
  <let len (alen exprs)>
  <recur [-i=0]
    if (ieq i len) false
      ~if ,(ael exprs i) true ,(self (iinc i));;>>

<macro and [&exprs]
  <let len (alen exprs)>
  <recur [-i=0]
    if (ieq i len) true
      ~if ,(ael exprs i) ,(self (iinc i)) false;;>>

# type functions.

<pub-fn is-call   [-o] (is (type-of o) Call)>
<pub-fn is-data   [-o] (is (type-of o) Data)>
<pub-fn is-env    [-o] (is (type-of o) Env)>
<pub-fn is-int    [-o] (is (type-of o) Int)>
<pub-fn is-label  [-o] (is (type-of o) Label)>
<pub-fn is-ptr    [-o] (is (type-of o) Ptr)>
<pub-fn is-sym    [-o] (is (type-of o) Sym)>
<pub-fn is-type   [-o] (is (type-of o) Type)>
<pub-fn is-variad [-o] (is (type-of o) Variad)>

<pub-fn is-arr    [-o] (is (type-of (.kind (type-of o))) Type-kind-arr)>
<pub-fn is-struct [-o] (is (type-of (.kind (type-of o))) Type-kind-struct)>

<pub-fn is-cmpd [-o] <or (is-arr o) (is-struct o)>>

<pub-fn is-type-conforming [-act:Type -req:Type]
  # TODO!
  true>

# output functions.

<let-fn write1 [-file -str]
  # write a single string.
  # TODO: support other types.
  (write (.ptr file) str)>

<let-fn writeR1 [-file -obj]
  # write a single repr.
  (write-repr (.ptr file) obj)>

<macro pub-writer [-name -writer1 -file -sep -end]
  ~<pub-fn ,name [&items]
    <recur [-i=0]
      if (ieq i (alen items))
        (write1 ,file ,end)
        { <when i (write1 ,file ,sep)>
          (,writer1 ,file (ael items i))
          (self (iinc i))};>>>

<pub-writer out   write1 std-out '' ''>
<pub-writer outS  write1 std-out ' ' ''>
<pub-writer outSS write1 std-out ' ' ' '>
<pub-writer outL  write1 std-out '' '\n'>
<pub-writer outSL write1 std-out ' ' '\n'>
<pub-writer outLL write1 std-out '\n' '\n'>

<pub-writer err   write1 std-err '' ''>
<pub-writer errS  write1 std-err ' ' ''>
<pub-writer errSS write1 std-err ' ' ' '>
<pub-writer errL  write1 std-err '' '\n'>
<pub-writer errSL write1 std-err ' ' '\n'>
<pub-writer errLL write1 std-err '\n' '\n'>

<pub-writer outR   writeR1 std-out '' ''>
<pub-writer outRS  writeR1 std-out ' ' ''>
<pub-writer outRSS writeR1 std-out ' ' ' '>
<pub-writer outRL  writeR1 std-out '' '\n'>
<pub-writer outRSL writeR1 std-out ' ' '\n'>
<pub-writer outRLL writeR1 std-out '\n' '\n'>

<pub-writer errR   writeR1 std-err '' ''>
<pub-writer errRS  writeR1 std-err ' ' ''>
<pub-writer errRSS writeR1 std-err ' ' ' '>
<pub-writer errRL  writeR1 std-err '' '\n'>
<pub-writer errRSL writeR1 std-err ' ' '\n'>
<pub-writer errRLL writeR1 std-err '\n' '\n'>

# comparison.

<pub-fn isnt [-a -b] (not (is a b))>

<pub-fn iso [-a -b]
  <cond
    (is a b) true
    (isnt (type-of a) (type-of b)) false
    (not (is-ref a)) false
    (is-data a) (data-ref-iso a b)
    (is-env a) false # environments have identity equality.
    { <let len (cmpd-len a)>
      <cond
        (ine len (cmpd-len b)) false
        (not len) true
        { <let last (idec len)>
          <recur [-i=0]
            <let ai (cmpd-el a i)>
            <let bi (cmpd-el b i)>
            <cond
              (ieq i last) (iso ai bi) # tail optimized.
              (not (iso ai bi)) false
              (self (iinc i))>>}>}>>

<pub-fn not-iso [-a -b] (not (iso a b))>

# const.

<pub-fn const [-val] <fn [] val>>

<pub-fn const1 [-val] <fn [-a] val>>

<pub-fn const2 [-val] <fn [-a -b] val>>

# unit tests.

<macro utest [-expectation &body]
  ~<scope
    <let exp ,expectation>
    <let act <scope ,*body>>
    <when (not-iso exp act)
      (errRSL 'expect:' exp)
      (errRSL 'actual:' act)
      (error "utest failure.")>>>

# cmpd.

<let-fn clone-cmpd [-obj] (CONS (type-of obj) *obj)>

# Arr.

<let-fn clone-arr [-arr:Arr-Obj -len:Int=(alen arr)] (CONS (type-of arr) *arr)>

<let-fn transform-arr-by-el [-arr -by:Func]
  # by signature: [-val:Obj | -transformed-val:Obj].
  # transform must return an object whose type conforms to the element type.
  <let type (type-of arr)>
  <let el-type (.el-type (.kind type))>
  <let len (alen arr)>
  <recur [-i=0 -res=arr]
    if (ieq i len) res {
      <let orig (ael arr i)>
      <let derived (by orig)>
      <check (is-type-conforming (type-of derived) el-type)
        "transform-arr-by-el: transformed value type does not conform to el-type">
      (self (iinc i) if (is derived orig) res
        (aput if (is res arr) (clone-arr arr) res; i derived);)};>>

<let-fn arr-copy-to [-dst:Arr-Obj -src:Arr-Obj -to:Int]
  <check (ige (alen dst) to) "dst is smaller than end index 'to'">
  <check (ige (alen src) to) "src is smaller than end index 'to'">
  <recur [-i=0]
    if (ieq i to) dst
      { (aput dst i (ael src i))
        (self (iinc i))};>>

<let-fn arr-copy [-dst:Arr-Obj -src:Arr-Obj] (arr-copy-to dst src (alen src))>

# TODO: copy-deep, clone-deep?

<let-fn arr-resize [-arr:Arr-Obj -len:Int]
  # create a new array with elements copied from arr; further elements remain UNINIT.
  (arr-copy-to (anew Arr-Obj len) arr (alen arr))>

<let-fn arr-map [-arr -ret-type:Type -f]
  <let l (alen arr)>
  <let res (anew ret-type l)>
  <recur [-i=0]
    if (ieq i l) res
      { (aput res i (f (ael arr i)))
        (self (iinc i))};>>

# struct.

<let-fn clone-struct [-obj] (CONS (type-of obj) *obj)>

<let-fn transform-struct [-obj:Obj -by:Func]
  # by signature: [-name:Sym -val:Obj | -transformed-val:Obj].
  # by must return an object whose type conforms to that of the field;
  # this requirement makes this function dependently typed.
  <let type (type-of obj)>
  <let fields (.fields (.kind type))>
  <let len (cmpd-len obj)>
  <recur [-i=0 -res=obj]
    if (ieq i len) res {
      <let field (ael fields i)>
      <let name (.name field)>
      <let orig (cmpd-el obj i)>
      <let derived (by name orig)>
      <check (is-type-conforming (type-of derived) (.type field))
        "transform-struct: transformed value type does not conform to field">
      (self (iinc i) if (is derived orig) res
        (cmpd-put
          if (is res obj) (clone-struct obj) res;
          i
          derived);)};>>

# type definitions.

<macro let-type [-name -kind]
  # type instances are structs of -name:Expr -kind:Type-kind.
  # note that the type of name is Expr, not Sym,
  # because the name of a derived type might be the expression used to derive it.
  # Type-kind is a union of the various Type-kind-*.
  ~<let ,name (CONS Type `,name ,kind)>>

<macro let-type-var [-name] ~<let-type ,name (CONS Type-kind-var)>>

# idiomatic type vars.
<let-type-var T>
<let-type-var E>
<let-type-var K>
<let-type-var V>

<macro let-struct [-name &fields]
  <let pars (arr-map fields Arr-Par <fn [-field]
    (CONS Par (.name field) (.type field) (.expr field))>)>
  ~<let-type ,name (CONS Type-kind-struct
      `,pars)>>

<macro let-union [-name &variants]
  ~<let-type ,name (CONS Type-kind-struct `,(arr-map variants Arr-Type identity))>>

# List (untyped).

<let-struct List -len:Int -arr:Arr-Obj> # resizable array.

<let-fn list-el [-list:List -index:Int]
  <check (ilt index (.len list)) "index out of bounds">
  (ael (.arr list) index)>

<let-fn list-put [-list:List -index:Int -el:Obj]
  check((ilt index (.len list)) "index out of bounds")
  (aput (.arr list) index el)>

<let-fn list-is-full [-list:List] (ieq (.len list) (alen (.arr list)))>

<let-fn list-grow [-list:List]
  <check (list-is-full list) "list should not grow unless arr is full">
  <let len (.len list)>
  <let cap if len (imul len 2) 2;>
  (.=arr list (arr-resize (.arr list) cap))
  list>

<let-fn list-append [-list:List -el:Obj]
  <when (list-is-full list) (list-grow list)>
  <let index (.len list)>
  (.=len list (iinc index))
  (aput (.arr list) index el)
  list>

<let-fn list-contains [-cmp:Func -list:List -el:Obj]
  <recur [-i=0]
    <cond
      (ieq i (.len list)) false
      (cmp el (list-el list i)) true
      (self (iinc i))>>>

<let-fn list-new [&els]
  <let l (CONS List 0 (CONS Arr-Obj))>
  <recur [-i=0]
    if (ieq i (alen els)) l
      { (list-append l (ael els i))
        (self (iinc i))};>>

# List as Set.

<let-fn list-set-put [-cmp:Func -set:List -el:Obj]
  # returns false if set already contains the element.
  <recur [-i=0]
    <cond
      (ieq i (.len set)) {(list-append set el) true}
      (cmp el (list-el set i)) false
      (self (iinc i))>>>

# List as Dict.

<let-struct Dict-item -key:Obj -val:Obj>
<let-struct Dict-fetch -found:Bool -val:Obj>

<let-fn list-dict-contains [-cmp:Func -dict:List -key:Obj]
  <recur [-i=0]
    if (ieq i (.len dict)) false
      { <let e (list-el dict i)>
        if (cmp (.key e) key) true
          (self (iinc i));};>>

<let-fn list-dict-fetch [-cmp:Func -dict:List -key:Obj]
  <recur [-i=0]
    if (ieq i (.len dict)) (CONS Dict-fetch false nil)
      { <let e (list-el dict i)>
        if (cmp (.key e) key) (CONS Dict-fetch true (.val e))
          (self (iinc i));};>>

<let-fn list-dict-put [-cmp:Func -cmp-val:Func -dict:List -key:Obj -val:Obj]
  # returns "is-new": false if dict already contains the item;
  # raises an error if dict contains the key, but value does not compare to true.
  <recur [-i=0]
    if (ieq i (.len dict))
      { (list-append dict (CONS Dict-item key val)) true}
      { <let e (list-el dict i)>
        if (cmp (.key e) key)
          { <when (not (cmp-val (.val e) val))
              (errL "list-dict-put: different value already exists for key")
              (errRSL "original:" (.val e))
              (errRSL "incoming:" val)
              (raise "")>
            false}
          (self (iinc i));};>>

<let-fn list-dict-memo [-cmp:Func -dict:List -key:Obj -val-fn:Func]
  # return val for key if already memoized;
  # otherwise evaluate val-fn, memoize result and return.
  <let fetch (list-dict-fetch is dict key)>
  if (.found fetch) (.val fetch)
    { <let val (val-fn)>
      <check (is (list-dict-put cmp is dict key val) true) "list-dict-memo: put should be new">
      val};>

<let-fn list-dict-new [&kv]
  # create a new list dictionary from interleaved key/val arguments.
  <check (not (imod (alen kv) 2)) "dangling key">
  <let d (list-new)>
  <recur [-i=0]
    if (ieq i (alen kv)) d
      { (list-dict-put is is d (ael kv i) (ael kv (iinc i)))
        (self (iadd i 2))};>>

# type derivation.

<let-struct Type-deriv-key -type:Type -dict:List> # key type for type-deriv-memo.

<let type-deriv-memo (list-dict-new)> # global type derivation memoizer.

<let-fn derive-label [-derive-name:Func -label:Label -dict:List]
  # derive a label expr as part of a derived type name expr,
  # by making appropriate substitutions in the =expr portion of the label.
  (transform-struct label <fn [-n -v]
    if (is n `expr)
      { <let fetch (list-dict-fetch is dict n)>
        if (.found fetch) (.val fetch) (derive-name v dict);}
      v;>)> # only transform label expr.

<let-fn derive-call [-derive-name:Func -call:Call -dict:List]
  # derive a call expr as part of a derived type name expr.
  (transform-struct call <fn [-n -v]
    <check (is n `exprs) "expected single 'exprs field for call">
    (transform-arr-by-el v <fn [-e] (derive-name e dict)>)>)>

<let-fn derive-name [-name:Expr -dict:List]
  # derive a name expression from 'name by substituting appropriate values from 'dict.
  <cond
    (is-sym name) {
      <let fetch (list-dict-fetch is dict name)>
      if (.found fetch) (.name (.val fetch)) name;}
    (is-label name) (derive-label self name dict)
    (is-call name) (derive-call self name dict)
    (error "derive-name unexpected type")>>

<let-fn derive-arr [-derive-type:Func -type:Type -dict:List]
  # derive an array type from an abstract type and a list-dict mapping type-vars to types.
  <let n (.name type)>
  <let k (.kind type)>
  <let orig (.el-type k)>
  <let derived (derive-type orig dict)>
  if (is derived orig) type
    (CONS Type (derive-name (.name type) dict) (CONS Type-kind-arr derived));>

<let-fn derive-struct [-derive-type:Func -type:Type -dict:List]
  # derive a struct type from an abstract type and a list-dict mapping type-vars to types.
  <let kind (.kind t)>
  <let fields-orig (.fields kind)>
  <let fields-derived (transform-arr-by-el fields-orig <fn [-e] (derive-type e dict)>)>
  if (is fields-derived fields) type
     # for now, just ignore the struct dispatcher.
    (CONS Type (derive-name (.name type) dict) (CONS Type-kind-struct fields-derived nil));>

<let-fn derive-union [-derive-type:Func -name:Expr -kind:Type-kind-union -dict-List]
  # derive a union type from an abstract type and a list-dict mapping type-vars to types.
  <let kind (.kind t)>
  <let variants-orig (.fields kind)>
  <let variants-derived (transform-arr-by-el variants-orig <fn [-e] derive-type e dict>)>
  if (is fields-derived fields) type
    (CONS Type (derive-name (.name type) dict) (CONS Type-kind-union variants-derived));>

<let-fn derive-type [-type:Type -dict:List]
  # derive a type from an abstract type and a list-dict mapping type var name syms to types.
  # NOTE: the list-dict must be in some canonical order or else memo fetch will fail.
  <let key (CONS Type-deriv-key type dict)>
  (list-dict-memo is type-deriv-memo key <fn []
    <let n (.name type)>
    <let k (.kind type)>
    <let tk (type-of k)>
    <cond
      (is tk Type-kind-unit) type
      (is tk Type-kind-prim) type
      (is tk Type-kind-class) type
      (is tk Type-kind-arr) (derive-arr derive-type type dict)
      (is tk Type-kind-struct) (derive-struct derive-type type dict)
      (is tk Type-kind-union) (derive-union derive-type type dict)
      (is tk Type-kind-var) {
        <let fetch (list-dict-fetch is dict n)>
        # return either the replacement type val or the unreplaced var.
        if (.found fetch) (.val fetch) type;}
      (error "derive-type: unknown type kind")>>)>

<macro let-generic [-local-name -name-expr -kind]
  ~<let ,local-name (CONS Type `,name-expr ,kind)>>

<macro let-derived [-local-name -generic -var-sym -type-val]
  ~<let ,local-name (derive-type ,generic (list-dict-new ,var-sym ,type-val))>>

<let-generic Arr (Arr -E=E) (CONS Type-kind-arr E)>
